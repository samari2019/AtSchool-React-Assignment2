{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useReducer } from \"react\";\n\n// The state initial state\nconst initialState = {\n  isLoding: false,\n  error: {\n    hasError: false,\n    message: \"\"\n  }\n};\n\n// The function triggered when the dispatchFn fro the useReducer is called\nconst fetchReducer = (state, action) => {\n  if (action.type === \"LOADING\") {\n    const updatedState = {\n      ...state,\n      isLoading: action.value\n    };\n    return updatedState;\n  }\n  if (action.type === \"ERROR\") {\n    const updatedState = {\n      ...state,\n      error: action.value\n    };\n    return updatedState;\n  }\n  return state;\n};\n\n// Cretaing a custom hook\nconst useFetch = () => {\n  _s();\n  const [fetchState, dispatchFn] = useReducer(fetchReducer, initialState);\n\n  // A fuction to close the error modal.\n  const closeModal = () => {\n    dispatchFn({\n      type: \"ERROR\",\n      value: {\n        hasError: false,\n        message: \"\"\n      }\n    });\n  };\n\n  // The function to send the fetch request. is it expecting a configuration object as well as a function that will get the request transformed data\n  const fetchRequest = useCallback(async function (configObj) {\n    let getData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    dispatchFn({\n      type: \"LOADING\",\n      value: true\n    });\n    dispatchFn({\n      type: \"ERROR\",\n      value: {\n        hasError: false,\n        message: \"\"\n      }\n    });\n    try {\n      const response = await fetch(configObj.url);\n      if (!response.ok) {\n        throw new Error(`Something went wrong!`);\n      }\n\n      // Retrieving the body data\n      const responseBody = await response.json();\n\n      // Formatting the body data to what I need\n      const transformedData = [];\n      for (const student of responseBody.results) {\n        transformedData.push({\n          id: student.id.value,\n          name: `${student.name.first} ${student.name.last}`,\n          email: student.email,\n          img: student.picture.medium\n        });\n      }\n      // Sending the data to the component that send the request\n      getData(transformedData);\n    } catch (err) {\n      dispatchFn({\n        type: \"ERROR\",\n        value: {\n          hasError: true,\n          message: err.message\n        }\n      });\n    }\n    dispatchFn({\n      type: \"LOADING\",\n      value: false\n    });\n  }, []);\n\n  // Destructuring the sate\n  const {\n    isLoading,\n    error\n  } = fetchState;\n  // Data that can be gotten from this custom hook\n  return {\n    isLoading,\n    error,\n    closeModal,\n    fetchRequest\n  };\n};\n_s(useFetch, \"RgE1HlSj92TXMqItEFRdn6xqTGQ=\");\nexport default useFetch;","map":{"version":3,"names":["useCallback","useReducer","initialState","isLoding","error","hasError","message","fetchReducer","state","action","type","updatedState","isLoading","value","useFetch","fetchState","dispatchFn","closeModal","fetchRequest","configObj","getData","response","fetch","url","ok","Error","responseBody","json","transformedData","student","results","push","id","name","first","last","email","img","picture","medium","err"],"sources":["C:/Users/SONIA/AltSchool-Assignment2/React-App/my-app/src/useFetch.js"],"sourcesContent":["import { useCallback, useReducer } from \"react\";\r\n\r\n// The state initial state\r\nconst initialState = {\r\n    isLoding: false,\r\n    error: {\r\n        hasError: false,\r\n        message: \"\",\r\n    },\r\n};\r\n\r\n// The function triggered when the dispatchFn fro the useReducer is called\r\nconst fetchReducer = (state, action) => {\r\n    if (action.type === \"LOADING\") {\r\n        const updatedState = { ...state, isLoading: action.value };\r\n        return updatedState;\r\n    }\r\n    if (action.type === \"ERROR\") {\r\n        const updatedState = {\r\n            ...state,\r\n            error: action.value,\r\n        };\r\n        return updatedState;\r\n    }\r\n    return state;\r\n};\r\n\r\n// Cretaing a custom hook\r\nconst useFetch = () => {\r\n    const [fetchState, dispatchFn] = useReducer(fetchReducer, initialState);\r\n\r\n    // A fuction to close the error modal.\r\n    const closeModal = () => {\r\n        dispatchFn({ type: \"ERROR\", value: { hasError: false, message: \"\" } });\r\n    };\r\n\r\n    // The function to send the fetch request. is it expecting a configuration object as well as a function that will get the request transformed data\r\n    const fetchRequest = useCallback(\r\n        async (configObj, getData = () => { }) => {\r\n            dispatchFn({ type: \"LOADING\", value: true });\r\n            dispatchFn({ type: \"ERROR\", value: { hasError: false, message: \"\" } });\r\n            try {\r\n                const response = await fetch(configObj.url)\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Something went wrong!`);\r\n                }\r\n\r\n                // Retrieving the body data\r\n                const responseBody = await response.json();\r\n\r\n                // Formatting the body data to what I need\r\n                const transformedData = [];\r\n                for (const student of responseBody.results) {\r\n                    transformedData.push({\r\n                        id: student.id.value,\r\n                        name: `${student.name.first} ${student.name.last}`,\r\n                        email: student.email,\r\n                        img: student.picture.medium,\r\n\r\n                    });\r\n                }\r\n                // Sending the data to the component that send the request\r\n                getData(transformedData);\r\n            } catch (err) {\r\n                dispatchFn({\r\n                    type: \"ERROR\",\r\n                    value: { hasError: true, message: err.message },\r\n                });\r\n            }\r\n            dispatchFn({ type: \"LOADING\", value: false });\r\n        },\r\n        []\r\n    );\r\n\r\n    // Destructuring the sate\r\n    const { isLoading, error } = fetchState;\r\n    // Data that can be gotten from this custom hook\r\n    return { isLoading, error, closeModal, fetchRequest };\r\n};\r\nexport default useFetch;"],"mappings":"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"},"metadata":{},"sourceType":"module"}